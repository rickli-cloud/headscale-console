name: Release

on:
  release:
    types:
      - published

jobs:
  build-golang:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Golang
        uses: actions/setup-go@v5
        # with:
        #   go-version: ""

      - name: Setup binaryen
        run: |
          sudo apt update
          sudo apt install -y binaryen

      - name: Build Golang WASM
        run: |
          GOOS=js GOARCH=wasm go build -trimpath -ldflags "-s -w" -o ./src/lib/api/tsconnect/pkg/client.wasm ./wasm/wasm.go
          wasm-opt --enable-bulk-memory -Oz ./src/lib/api/tsconnect/pkg/client.wasm -o ./src/lib/api/tsconnect/pkg/client.wasm
          cp "$(go env GOROOT)/misc/wasm/wasm_exec.js" ./src/lib/api/tsconnect/pkg/wasm_exec.js

      - name: Upload golang package
        uses: actions/upload-artifact@v4
        with:
          name: golang-wasm-pkg
          path: src/lib/api/tsconnect/pkg/

  build-rust:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          . "$HOME/.cargo/env"

      - name: Setup wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build Rust WASM
        working-directory: wasm
        run: wasm-pack build --out-name ironrdp --target web

      - name: Upload rust wasm package
        uses: actions/upload-artifact@v4
        with:
          name: rust-wasm-pkg
          path: wasm/pkg/

  test:
    needs:
      - build-golang
      - build-rust
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download golang wasm package
        uses: actions/download-artifact@v4
        with:
          name: golang-wasm-pkg
          path: src/lib/api/tsconnect/pkg/

      - name: Download rust wasm package
        uses: actions/download-artifact@v4
        with:
          name: rust-wasm-pkg
          path: wasm/pkg/

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install dependencies
        run: deno install

      # Basic syntax & types check
      - name: Run checks
        run: deno task check

      # TODO: proper tests
      # - name: Run unit tests
      #   run: deno task test:unit

      # - name: Run e2e tests
      #   run: deno task test:e2e

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download golang wasm package
        uses: actions/download-artifact@v4
        with:
          name: golang-wasm-pkg
          path: src/lib/api/tsconnect/pkg/

      - name: Download rust wasm package
        uses: actions/download-artifact@v4
        with:
          name: rust-wasm-pkg
          path: wasm/pkg/

      - name: Setup deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install dependencies
        run: deno install

      - name: Patch version
        run: deno --allow-read="package.json" --allow-write="package.json" patch-version.js ${{ github.event.release.tag_name }}

      - name: Build frontend
        run: deno task build

      - name: Upload app package
        uses: actions/upload-artifact@v4
        with:
          name: app-pkg
          path: dist/

  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download app package
        uses: actions/download-artifact@v4
        with:
          name: app-pkg
          path: dist/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Release build assets
        shell: bash
        working-directory: ${{ github.workspace }}
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        run: |
          cp LICENSE dist/LICENSE
          zip -r headscale-console-${{ github.event.release.tag_name }}.zip dist
          gh release upload ${{ github.event.release.tag_name }} headscale-console-${{ github.event.release.tag_name }}.zip

      - name: Build versioned docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/rickli-cloud/headscale-console:${{ github.event.release.tag_name }}
          push: true

      - name: Build latest docker image
        uses: docker/build-push-action@v5
        if: "!github.event.release.prerelease"
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/rickli-cloud/headscale-console:latest
          push: true
